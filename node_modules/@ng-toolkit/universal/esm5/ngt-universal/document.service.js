/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
var DocumentService = /** @class */ (function () {
    function DocumentService(platformId) {
        if (!isPlatformBrowser(platformId)) {
            this._document = /** @type {?} */ ({
                getElementById: function (id) { console.log('getElement by id'); return new HTMLElement(); },
                getElementsByClassName: function (className) { return new HTMLCollection(); },
                getElementsByName: function (name) { return new NodeList(); },
                getElementsByTagName: function (name) { return new NodeList(); }
            });
        }
        else {
            console.log('in browser, assigning document');
            // this._document = document;
            this._document = /** @type {?} */ ({});
        }
    }
    Object.defineProperty(DocumentService.prototype, "nativeDocument", {
        get: /**
         * @return {?}
         */
        function () {
            console.log('get native document');
            console.log(this._document);
            return this._document;
        },
        enumerable: true,
        configurable: true
    });
    DocumentService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    DocumentService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return DocumentService;
}());
export { DocumentService };
if (false) {
    /** @type {?} */
    DocumentService.prototype._document;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy10b29sa2l0L3VuaXZlcnNhbC8iLCJzb3VyY2VzIjpbIm5ndC11bml2ZXJzYWwvZG9jdW1lbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztJQUtoRCx5QkFBaUMsVUFBZTtRQUM1QyxFQUFFLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxJQUFJLENBQUMsU0FBUyxxQkFBRztnQkFDYixjQUFjLEVBQUUsVUFBQyxFQUFVLElBQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksV0FBVyxFQUFFLENBQUMsRUFBQztnQkFDNUYsc0JBQXNCLEVBQUUsVUFBQyxTQUFpQixJQUFLLE9BQUEsSUFBSSxjQUFjLEVBQUUsRUFBcEIsQ0FBb0I7Z0JBQ25FLGlCQUFpQixFQUFFLFVBQUMsSUFBWSxJQUFLLE9BQUEsSUFBSSxRQUFRLEVBQUUsRUFBZCxDQUFjO2dCQUNuRCxvQkFBb0IsRUFBRSxVQUFDLElBQVksSUFBSyxPQUFBLElBQUksUUFBUSxFQUFFLEVBQWQsQ0FBYzthQUM3QyxDQUFBLENBQUM7U0FDakI7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQzs7WUFFOUMsSUFBSSxDQUFDLFNBQVMscUJBQUcsRUFBYyxDQUFBLENBQUM7U0FDbkM7S0FDSjtJQUVELHNCQUFJLDJDQUFjOzs7O1FBQWxCO1lBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1lBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1NBQ3pCOzs7T0FBQTs7Z0JBdEJKLFVBQVU7Ozs7Z0RBR00sTUFBTSxTQUFDLFdBQVc7OzBCQU5uQzs7U0FJYSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0LCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRG9jdW1lbnRTZXJ2aWNlIHtcbiAgICBwcml2YXRlIF9kb2N1bWVudDogRG9jdW1lbnQ7XG4gICAgY29uc3RydWN0b3IoQEluamVjdChQTEFURk9STV9JRCkgcGxhdGZvcm1JZDogYW55KSB7XG4gICAgICAgIGlmICghaXNQbGF0Zm9ybUJyb3dzZXIocGxhdGZvcm1JZCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2RvY3VtZW50ID0ge1xuICAgICAgICAgICAgICAgIGdldEVsZW1lbnRCeUlkOiAoaWQ6IHN0cmluZykgPT4ge2NvbnNvbGUubG9nKCdnZXRFbGVtZW50IGJ5IGlkJyk7IHJldHVybiBuZXcgSFRNTEVsZW1lbnQoKTt9LFxuICAgICAgICAgICAgICAgIGdldEVsZW1lbnRzQnlDbGFzc05hbWU6IChjbGFzc05hbWU6IHN0cmluZykgPT4gbmV3IEhUTUxDb2xsZWN0aW9uKCksXG4gICAgICAgICAgICAgICAgZ2V0RWxlbWVudHNCeU5hbWU6IChuYW1lOiBzdHJpbmcpID0+IG5ldyBOb2RlTGlzdCgpLFxuICAgICAgICAgICAgICAgIGdldEVsZW1lbnRzQnlUYWdOYW1lOiAobmFtZTogc3RyaW5nKSA9PiBuZXcgTm9kZUxpc3QoKVxuICAgICAgICAgICAgfSBhcyBEb2N1bWVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpbiBicm93c2VyLCBhc3NpZ25pbmcgZG9jdW1lbnQnKTtcbiAgICAgICAgICAgIC8vIHRoaXMuX2RvY3VtZW50ID0gZG9jdW1lbnQ7XG4gICAgICAgICAgICB0aGlzLl9kb2N1bWVudCA9IHt9IGFzIERvY3VtZW50O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IG5hdGl2ZURvY3VtZW50KCk6IERvY3VtZW50IHtcbiAgICAgICAgY29uc29sZS5sb2coJ2dldCBuYXRpdmUgZG9jdW1lbnQnKTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5fZG9jdW1lbnQpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZG9jdW1lbnQ7XG4gICAgfVxufVxuIl19