import { Subject } from 'rxjs';
import { NgModule } from '@angular/core';
import { SwPush, SwUpdate } from '@angular/service-worker';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SwUpdateServerMock = /** @class */ (function () {
    function SwUpdateServerMock() {
        this.available = new Subject();
        this.activated = new Subject();
        this.isEnabled = false;
    }
    /**
     * @return {?}
     */
    SwUpdateServerMock.prototype.checkForUpdate = /**
     * @return {?}
     */
    function () {
        return new Promise(function (resolve) { return resolve(); });
    };
    /**
     * @return {?}
     */
    SwUpdateServerMock.prototype.activateUpdate = /**
     * @return {?}
     */
    function () {
        return new Promise(function (resolve) { return resolve(); });
    };
    return SwUpdateServerMock;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SwPushServerMock = /** @class */ (function () {
    function SwPushServerMock() {
    }
    /**
     * @param {?} options
     * @return {?}
     */
    SwPushServerMock.prototype.requestSubscription = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return new Promise(function (resolve) { return resolve(); });
    };
    /**
     * @return {?}
     */
    SwPushServerMock.prototype.unsubscribe = /**
     * @return {?}
     */
    function () {
        return new Promise(function (resolve) { return resolve(); });
    };
    return SwPushServerMock;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgtPwaMockModule = /** @class */ (function () {
    function NgtPwaMockModule() {
    }
    NgtPwaMockModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        { provide: SwUpdate, useClass: SwUpdateServerMock },
                        { provide: SwPush, useClass: SwPushServerMock }
                    ]
                },] },
    ];
    return NgtPwaMockModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgtPwaMockModule, SwPushServerMock, SwUpdateServerMock };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdG9vbGtpdC1wd2EuanMubWFwIiwic291cmNlcyI6WyJuZzovL0BuZy10b29sa2l0L3B3YS9uZ3QtcHdhL3N3LXVwZGF0ZS1zZXJ2ZXIubW9jay5zZXJ2aWNlLnRzIiwibmc6Ly9AbmctdG9vbGtpdC9wd2Evbmd0LXB3YS9zdy1wdXNoLXNlcnZlci5tb2NrLnNlcnZpY2UudHMiLCJuZzovL0BuZy10b29sa2l0L3B3YS9uZ3QtcHdhL25ndC1wd2EtbW9jay5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVXBkYXRlQWN0aXZhdGVkRXZlbnQsIFVwZGF0ZUF2YWlsYWJsZUV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvc2VydmljZS13b3JrZXIvc3JjL2xvd19sZXZlbCc7XG5cbmV4cG9ydCBjbGFzcyBTd1VwZGF0ZVNlcnZlck1vY2sge1xuICBwdWJsaWMgYXZhaWxhYmxlOiBPYnNlcnZhYmxlPFVwZGF0ZUF2YWlsYWJsZUV2ZW50PiA9IG5ldyBTdWJqZWN0KCk7XG4gIHB1YmxpYyBhY3RpdmF0ZWQ6IE9ic2VydmFibGU8VXBkYXRlQWN0aXZhdGVkRXZlbnQ+ID0gbmV3IFN1YmplY3QoKTtcbiAgcHVibGljIGlzRW5hYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHB1YmxpYyBjaGVja0ZvclVwZGF0ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHJlc29sdmUoKSk7XG4gIH1cbiAgcHVibGljIGFjdGl2YXRlVXBkYXRlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVzb2x2ZSgpKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgY2xhc3MgU3dQdXNoU2VydmVyTW9jayB7XG4gICAgcHVibGljIG1lc3NhZ2VzOiBPYnNlcnZhYmxlPG9iamVjdD47XG4gICAgcHVibGljIHN1YnNjcmlwdGlvbjogT2JzZXJ2YWJsZTxQdXNoU3Vic2NyaXB0aW9uIHwgbnVsbD47XG4gICAgcHVibGljIHJlcXVlc3RTdWJzY3JpcHRpb24ob3B0aW9uczoge1xuICAgICAgICBzZXJ2ZXJQdWJsaWNLZXk6IHN0cmluZztcbiAgICB9KTogUHJvbWlzZTxQdXNoU3Vic2NyaXB0aW9uPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVzb2x2ZSgpKTtcbiAgICB9XG4gICAgcHVibGljIHVuc3Vic2NyaWJlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHJlc29sdmUoKSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN3UHVzaCwgU3dVcGRhdGUgfSBmcm9tICdAYW5ndWxhci9zZXJ2aWNlLXdvcmtlcic7XG5pbXBvcnQgeyBTd1VwZGF0ZVNlcnZlck1vY2sgfSBmcm9tICcuL3N3LXVwZGF0ZS1zZXJ2ZXIubW9jay5zZXJ2aWNlJztcbmltcG9ydCB7IFN3UHVzaFNlcnZlck1vY2sgfSBmcm9tICcuL3N3LXB1c2gtc2VydmVyLm1vY2suc2VydmljZSc7XG5cblxuQE5nTW9kdWxlKHtcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge3Byb3ZpZGU6IFN3VXBkYXRlLCB1c2VDbGFzczogU3dVcGRhdGVTZXJ2ZXJNb2NrIH0sXG4gICAgICAgIHtwcm92aWRlOiBTd1B1c2gsIHVzZUNsYXNzOiBTd1B1c2hTZXJ2ZXJNb2NrIH1cbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIE5ndFB3YU1vY2tNb2R1bGUge31cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBR0E7O3lCQUN1RCxJQUFJLE9BQU8sRUFBRTt5QkFDYixJQUFJLE9BQU8sRUFBRTt5QkFDdEMsS0FBSzs7Ozs7SUFFMUIsMkNBQWM7Ozs7UUFDbkIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sSUFBSyxPQUFBLE9BQU8sRUFBRSxHQUFBLENBQUMsQ0FBQzs7Ozs7SUFFdEMsMkNBQWM7Ozs7UUFDbkIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sSUFBSyxPQUFBLE9BQU8sRUFBRSxHQUFBLENBQUMsQ0FBQzs7NkJBWi9DO0lBY0M7Ozs7OztBQ1pELElBQUE7Ozs7Ozs7SUFHVyw4Q0FBbUI7Ozs7Y0FBQyxPQUUxQjtRQUNHLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLElBQUssT0FBQSxPQUFPLEVBQUUsR0FBQSxDQUFDLENBQUM7Ozs7O0lBRXhDLHNDQUFXOzs7O1FBQ2QsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sSUFBSyxPQUFBLE9BQU8sRUFBRSxHQUFBLENBQUMsQ0FBQzs7MkJBWG5EO0lBYUM7Ozs7OztBQ2JEOzs7O2dCQU1DLFFBQVEsU0FBQztvQkFDTixTQUFTLEVBQUU7d0JBQ1AsRUFBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRTt3QkFDbEQsRUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRTtxQkFDakQ7aUJBQ0o7OzJCQVhEOzs7Ozs7Ozs7Ozs7Ozs7In0=