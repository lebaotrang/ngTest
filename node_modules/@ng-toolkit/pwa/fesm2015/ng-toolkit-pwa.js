import { Subject } from 'rxjs';
import { NgModule } from '@angular/core';
import { SwPush, SwUpdate } from '@angular/service-worker';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SwUpdateServerMock {
    constructor() {
        this.available = new Subject();
        this.activated = new Subject();
        this.isEnabled = false;
    }
    /**
     * @return {?}
     */
    checkForUpdate() {
        return new Promise((resolve) => resolve());
    }
    /**
     * @return {?}
     */
    activateUpdate() {
        return new Promise((resolve) => resolve());
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SwPushServerMock {
    /**
     * @param {?} options
     * @return {?}
     */
    requestSubscription(options) {
        return new Promise((resolve) => resolve());
    }
    /**
     * @return {?}
     */
    unsubscribe() {
        return new Promise((resolve) => resolve());
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgtPwaMockModule {
}
NgtPwaMockModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    { provide: SwUpdate, useClass: SwUpdateServerMock },
                    { provide: SwPush, useClass: SwPushServerMock }
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgtPwaMockModule, SwPushServerMock, SwUpdateServerMock };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdG9vbGtpdC1wd2EuanMubWFwIiwic291cmNlcyI6WyJuZzovL0BuZy10b29sa2l0L3B3YS9uZ3QtcHdhL3N3LXVwZGF0ZS1zZXJ2ZXIubW9jay5zZXJ2aWNlLnRzIiwibmc6Ly9AbmctdG9vbGtpdC9wd2Evbmd0LXB3YS9zdy1wdXNoLXNlcnZlci5tb2NrLnNlcnZpY2UudHMiLCJuZzovL0BuZy10b29sa2l0L3B3YS9uZ3QtcHdhL25ndC1wd2EtbW9jay5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVXBkYXRlQWN0aXZhdGVkRXZlbnQsIFVwZGF0ZUF2YWlsYWJsZUV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvc2VydmljZS13b3JrZXIvc3JjL2xvd19sZXZlbCc7XG5cbmV4cG9ydCBjbGFzcyBTd1VwZGF0ZVNlcnZlck1vY2sge1xuICBwdWJsaWMgYXZhaWxhYmxlOiBPYnNlcnZhYmxlPFVwZGF0ZUF2YWlsYWJsZUV2ZW50PiA9IG5ldyBTdWJqZWN0KCk7XG4gIHB1YmxpYyBhY3RpdmF0ZWQ6IE9ic2VydmFibGU8VXBkYXRlQWN0aXZhdGVkRXZlbnQ+ID0gbmV3IFN1YmplY3QoKTtcbiAgcHVibGljIGlzRW5hYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHB1YmxpYyBjaGVja0ZvclVwZGF0ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHJlc29sdmUoKSk7XG4gIH1cbiAgcHVibGljIGFjdGl2YXRlVXBkYXRlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVzb2x2ZSgpKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgY2xhc3MgU3dQdXNoU2VydmVyTW9jayB7XG4gICAgcHVibGljIG1lc3NhZ2VzOiBPYnNlcnZhYmxlPG9iamVjdD47XG4gICAgcHVibGljIHN1YnNjcmlwdGlvbjogT2JzZXJ2YWJsZTxQdXNoU3Vic2NyaXB0aW9uIHwgbnVsbD47XG4gICAgcHVibGljIHJlcXVlc3RTdWJzY3JpcHRpb24ob3B0aW9uczoge1xuICAgICAgICBzZXJ2ZXJQdWJsaWNLZXk6IHN0cmluZztcbiAgICB9KTogUHJvbWlzZTxQdXNoU3Vic2NyaXB0aW9uPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVzb2x2ZSgpKTtcbiAgICB9XG4gICAgcHVibGljIHVuc3Vic2NyaWJlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHJlc29sdmUoKSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN3UHVzaCwgU3dVcGRhdGUgfSBmcm9tICdAYW5ndWxhci9zZXJ2aWNlLXdvcmtlcic7XG5pbXBvcnQgeyBTd1VwZGF0ZVNlcnZlck1vY2sgfSBmcm9tICcuL3N3LXVwZGF0ZS1zZXJ2ZXIubW9jay5zZXJ2aWNlJztcbmltcG9ydCB7IFN3UHVzaFNlcnZlck1vY2sgfSBmcm9tICcuL3N3LXB1c2gtc2VydmVyLm1vY2suc2VydmljZSc7XG5cblxuQE5nTW9kdWxlKHtcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge3Byb3ZpZGU6IFN3VXBkYXRlLCB1c2VDbGFzczogU3dVcGRhdGVTZXJ2ZXJNb2NrIH0sXG4gICAgICAgIHtwcm92aWRlOiBTd1B1c2gsIHVzZUNsYXNzOiBTd1B1c2hTZXJ2ZXJNb2NrIH1cbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIE5ndFB3YU1vY2tNb2R1bGUge31cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzt5QkFJdUQsSUFBSSxPQUFPLEVBQUU7eUJBQ2IsSUFBSSxPQUFPLEVBQUU7eUJBQ3RDLEtBQUs7Ozs7O0lBRTFCLGNBQWM7UUFDbkIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sS0FBSyxPQUFPLEVBQUUsQ0FBQyxDQUFDOzs7OztJQUV0QyxjQUFjO1FBQ25CLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEtBQUssT0FBTyxFQUFFLENBQUMsQ0FBQzs7Q0FFOUM7Ozs7OztBQ1pEOzs7OztJQUdXLG1CQUFtQixDQUFDLE9BRTFCO1FBQ0csT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sS0FBSyxPQUFPLEVBQUUsQ0FBQyxDQUFDOzs7OztJQUV4QyxXQUFXO1FBQ2QsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sS0FBSyxPQUFPLEVBQUUsQ0FBQyxDQUFDOztDQUVsRDs7Ozs7O0FDYkQ7OztZQU1DLFFBQVEsU0FBQztnQkFDTixTQUFTLEVBQUU7b0JBQ1AsRUFBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRTtvQkFDbEQsRUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRTtpQkFDakQ7YUFDSjs7Ozs7Ozs7Ozs7Ozs7OyJ9